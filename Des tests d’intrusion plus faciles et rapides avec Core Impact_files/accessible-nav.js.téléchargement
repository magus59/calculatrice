/**
* @file
* Adds accessibility functionality to main navigation.
*
*/

(function(Drupal) {
  'use strict';

  Drupal.behaviors.navigation = {
    attach: function(context, settings) {
      const body = document.querySelector('body');
      const mainMenu = document.querySelector('.main-navigation--nav');
      const menuToggle = document.querySelector('.navbar-toggler');
      let mediaQuery = window.matchMedia("(max-width: 1199px)");

      const itemsWithDropDowns = document.querySelectorAll('.main-navigation--nav > .fmHasChildren');

      let dropdownInstances = [];

      if (!menuToggle) return;

      /**
      * Adds classes to stop body scroll when mobile menu is expanded.
      */
      menuToggle.addEventListener('click', function () {
        if (menuToggle.getAttribute('aria-expanded') === 'false') {
          body.classList.add('mobile-menu--open');
        } else {
          body.classList.remove('mobile-menu--open');
         }
      })

      /**
      * Apply hide on desktop classes to appropriate list items.
      */
      const mobileOnlyMenuItems = mainMenu.querySelectorAll('.hide-on-desktop');

      mobileOnlyMenuItems.forEach(menuItem => {
        menuItem.parentElement.classList.add('d-xl-none');
      });

      window.addEventListener('load', menuSetup);

      /**
      * Resets mobile menu values to ensure it is automatically closed during
      * resize.
      */
      // Run a debounced resetMobileMenu on window resize event.
      window.addEventListener('resize', Drupal.debounce(resetMobileMenu, 100));

      function resetMobileMenu() {
        const navbarWrapper = document.querySelector('#navbarCollapse');

        // TODO: Rename togglePopper
        togglePopper();

        navbarWrapper.classList.remove('show');

        if (mediaQuery.matches) {
          menuToggle.setAttribute('aria-expanded', 'false');
        } else {
          itemsWithDropDowns.forEach(item => {
            const btnGroup = item.querySelector('.btn-group');
            const button = item.querySelector('button');
            const dropdown = item.querySelector('.dropdown-menu');

            btnGroup.classList.remove('show');
            dropdown.classList.remove('show');
            button.setAttribute('aria-expanded', 'false');
          })

          body.classList.remove('mobile-menu--open');
          calculateHeaderHeight();
        }
      };

      function calculateHeaderHeight() {
        const header = document.querySelector('header');
        const headerHeight = header.getBoundingClientRect().height;
        // Include toolbar height for logged in users.
        const toolbar = document.querySelector('.toolbar');
        const toolbarTray = document.querySelector('.toolbar-tray');
        let toolbarHeight = 39;
        let toolbarTrayHeight = 0;
        let totalToolbarHeight = 0;
        let totalHeaderHeight = 0;

        if (toolbar) {
          if (toolbarTray.classList.contains('toolbar-tray-horizontal')) {
            toolbarTrayHeight = 39;
          } else {
            toolbarTrayHeight = 0;
          }

          totalToolbarHeight = toolbarHeight + toolbarTrayHeight;
        }

        totalHeaderHeight = totalToolbarHeight + headerHeight;

        // set height as CSS variable;
        document.documentElement.style.setProperty('--headerHeight', `${totalHeaderHeight}px`);
      }

      function menuSetup() {
        calculateHeaderHeight();
        togglePopper();
      }

      function togglePopper() {
        if (mediaQuery.matches) {
          if(dropdownInstances.length) {
            dropdownInstances.forEach(dropdownInstance => {
              dropdownInstance.parentElement.parentElement.setAttribute('style', '');
              dropdownInstance.setAttribute('style', '');
            });

            dropdownInstances = [];
          }
        } else {
          itemsWithDropDowns.forEach((item) => {
            const megamenuDropdown = item.querySelector('.dropdown--has-columns');
            const dropdown = item.querySelector('.dropdown-menu:not(.dropdown--has-columns)');

            // Adjusts placement of the megamenu dropdown to align to the right
            // edge of the screen in instances where it is wide.
            if (megamenuDropdown) {
              const megamenuDropdownBounds = megamenuDropdown.getBoundingClientRect();

              // if width + height of megamenuDropdown is greater than window.
              // added + 50 to accomodate for change in width when dropdown is shown
              // Debug using attributes
              //var measurements = "Megamenu width: "+ megamenuDropdownBounds.width + "; Megamenu Left: " + megamenuDropdownBounds.left + "; Window: "+ window.outerWidth+ "; document: "+document.documentElement.clientWidth+";";
              //item.setAttribute("measurements", measurements);

              if ((megamenuDropdownBounds.width + megamenuDropdownBounds.left + 50) > document.documentElement.clientWidth) {
                item.setAttribute('style', 'position:unset;');
                megamenuDropdown.setAttribute('style', `left: unset;right: 0rem;`);
              }

              dropdownInstances.push(megamenuDropdown);
            }

            if (dropdown) {
              const dropdownBounds = dropdown.getBoundingClientRect();

              // Debug using attributes
              //var measurements = "Megamenu width: "+ dropdownBounds.width + "; Megamenu Left: " + dropdownBounds.left + "; Window: "+ window.outerWidth+ "; document: "+document.documentElement.clientWidth+";";
              //item.setAttribute("measurements", measurements);

              if ((dropdownBounds.width + dropdownBounds.left) > document.documentElement.clientWidth) {
                dropdown.setAttribute('style', `left: unset;right: 0;`);
              }

              dropdownInstances.push(dropdown);
            }
          });
        }
      };

      const columns = mainMenu.querySelectorAll('.fmColumn');

      columns.forEach(column => {
        const parent = column.closest('ul');
        parent.classList.add('dropdown--has-columns');
      });

      /**
      * For Bootstrap, allows for aria-labelled to be set on direct child of
      * top-level nav items.
      */

      // If main nav has no dropdowns, exit early.
      if (!itemsWithDropDowns) return;

      itemsWithDropDowns.forEach((item) => {
        const button = item.querySelector('button');
        const dropdown = item.querySelector('.dropdown-menu');
        const id = button.getAttribute('id');

        dropdown.setAttribute('aria-labelledby', id);
      });
    }
  }
})(Drupal);
